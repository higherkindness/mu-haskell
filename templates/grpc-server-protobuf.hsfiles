{-# START_FILE {{name}}.cabal #-}
name:               {{name}}
version:            0.1.0.0

-- synopsis:
-- description:
homepage:           https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme
author:             {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:         {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:          {{copyright}}{{^copyright}}{{year}}{{^year}}2020{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
category:           {{category}}{{^category}}Web{{/category}}
build-type:         Simple
cabal-version:      >=1.10
extra-source-files: README.md

executable {{name}}
  hs-source-dirs:   src
  main-is:          Main.hs
  other-modules:    Schema
  default-language: Haskell2010
  build-depends:
      base            >=4.12  && <5
    , mu-grpc-server  >=0.3.0
    , mu-protobuf     >=0.3.0
    , mu-rpc          >=0.3.0
    , mu-schema       >=0.3.0
    , text

{-# START_FILE stack.yaml #-}
resolver: lts-15.8
allow-newer: true
extra-deps:
# mu
- mu-schema-0.3.0.0
- mu-rpc-0.3.0.0
- mu-optics-0.3.0.0
- mu-avro-0.3.0.0
- mu-protobuf-0.3.0.0
- mu-grpc-server-0.3.0.0
- mu-grpc-common-0.3.0.0
- compendium-client-0.3.0.0
# dependencies of mu
- http2-client-0.9.0.0
- http2-grpc-types-0.5.0.0
- http2-grpc-proto3-wire-0.1.0.0
- warp-grpc-0.4.0.0
- proto3-wire-1.1.0
- language-protobuf-1.0.1
- language-avro-0.1.3.1
- avro-0.5.1.0

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE .gitignore #-}
.stack-work/
stack*.yaml.lock
*~

{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE {{name}}.proto #-}
syntax = "proto3";

import "google/protobuf/empty.proto";

package {{name}};

service Service {

}

{-# START_FILE src/Schema.hs #-}
{-# language DataKinds             #-}
{-# language DeriveAnyClass        #-}
{-# language DeriveGeneric         #-}
{-# language DuplicateRecordFields #-}
{-# language FlexibleContexts      #-}
{-# language FlexibleInstances     #-}
{-# language MultiParamTypeClasses #-}
{-# language PolyKinds             #-}
{-# language TemplateHaskell       #-}
{-# language TypeFamilies          #-}
{-# language TypeOperators         #-}

module Schema where

import Data.Text as T
import GHC.Generics

import Mu.Quasi.GRpc
import Mu.Schema

grpc "TheSchema" id "{{name}}.proto"

-- A. Map to Haskell types
-- data Message
--   = Message { ... }
--   deriving ( Eq, Show, Generic
--            , ToSchema   TheSchema "Message"
--            , FromSchema TheSchema "Message" )

-- B. Use optics
type Message = Term TheSchema (TheSchema :/: "Message")

{-# START_FILE src/Main.hs #-}
{-# language FlexibleContexts      #-}
{-# language PartialTypeSignatures #-}
{-# language OverloadedStrings     #-}
{-# OPTIONS_GHC -fno-warn-partial-type-signatures #-}

module Main where

import Mu.GRpc.Server
import Mu.Server

import Schema

main :: IO ()
main = runGRpcApp msgProtoBuf 8080 server

server :: MonadServer m => SingleServerT Service m _
server = singleService ()
